// 在实例生成以及后期的数据中，有8个钩子函数
// 1-4 初始化实例时会默认按照先后顺序执行，更新数据时，不再执行
let vm = new Vue({
    el: '#app',
    data: {
        arr:["a,","b"]
    },
    // 1、即将加载数据
    beforeCreate() {
        // 不能获取Data中的数据
        // 不能操作DOM
    },
    // 2、加载数据
    created() {
        // 可以获取data中的数据；但是不能操作DOM；
        // 可以在数据渲染前倒数第二次更改data中的数据，优化性能
        // 不会触发updated和其他的钩子函数
        // 一般可以在这里做初始数据的获取
        this.arr=["d","v"];
    },
    // 3、即将挂载DOM
    beforeMount() {
        // 可以获取data中的数据；但是不能操作DOM；
        // 可以在数据渲染前最后一次更改data中的数据，优化性能
        // 不会触发updated和其他的钩子函数
        // 一般可以在这里做初始数据的获取
    },
    // 4、挂载DOM
    mounted() {
        // 如果el，template没有绑定元素，可以执行该函数操作DOM
        // 把vue实例生成虚拟的DOM挂载到浏览器DOM上
    },
    // 5、即将更新数据
    beforeUpdate() {
        // 当组件或实例的数据更改之后，会立即执行beforeUpdate，然后vue的虚拟dom机制会重新虚拟dom并利用diff算法与上一次的虚拟dom树进行比较之后重新渲染，一般不做什么事儿
    },
    // 6、更新数据
    updated() {
        // 重新渲染和修补虚拟DOM
        // 操作更新后的虚拟dom
    },
    // 7、即将销毁
    beforeDestroy() {
        // 即将销毁子组件，watchers程序监视器,事件监听器
        // 一般在这里做一些善后工作，例如清除计时器、清除非指令绑定的事件等等
    },
    // 8、销毁
    destroyed() {
        // 销毁子组件，watchers程序监视器,事件监听器
        // 销毁后视图不再更新
        // 做一些善后工作
    },
});